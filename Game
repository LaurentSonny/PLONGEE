import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import edu.princeton.cs.introcs.StdDraw;

public class Game {
	static int oxygen;
	static int oxygenmax;
	static int phasenumber;
	static int currentphase = 1;
	static String action;
	static Boolean confirmedaction = false;
	static List<Integer> playingorderlist = new ArrayList<>();
	static List<Player> playerlist = new ArrayList<Player>();
	static List<Cave> cavelist = new ArrayList<Cave>();
	static Random random = new Random();

	public Game(int oxygenmax, int phasenumber, List<Player> playerlist, List<Cave> cavelist) {
		this.oxygenmax = oxygenmax;
		this.phasenumber = phasenumber;
		this.playerlist = playerlist;
		this.cavelist = cavelist;
	}

	public static void Display() {
		Affichage.generalDisplay();
		Affichage.caveDisplay(cavelist, playerlist);
		Affichage.levelDisplay(cavelist, playerlist);
		Affichage.chestDisplay(cavelist, playerlist);
		Affichage.textDisplay(cavelist, playerlist, oxygen);
		Affichage.playerDisplay(cavelist, playerlist);
	}

	public static void gameplay() throws InterruptedException {
		while (currentphase <= phasenumber) {
			playingorderlist = playingOrder(playerlist);
			for (int i = 0; i < playingorderlist.size(); ++i) {
				int valeurordrejoueurs = playingorderlist.get(i);
				Display();
				Affichage.turnDisplay(valeurordrejoueurs, playerlist);
				for ( int k : playingorderlist) {
					System.out.println(k);
				}
				confirmedaction = false;
				while (!confirmedaction) {
					Player joueur = playerlist.get(valeurordrejoueurs);
					Cave cave = cavelist.get(joueur.currentcave);
					Level niveau = cave.levels.get(joueur.currentlevel);
					testons(joueur, niveau);
					System.out.println(joueur.name + " à votre tour de jouer, veuillez taper:\r\n m pour monter \r\n d pour descendre \r\n a pour recuperer un coffre ");
					//Scanner sc = new Scanner(System.in);
					String action =Affichage.keyListenerDisplay();
					playTurn(joueur, cave, niveau, action);
					System.out.println("");
					System.out.println(joueur.name + " est à " + (joueur.currentlevel + 1) + " de profondeur dans la cave " + joueur.currentcave);
					System.out.println("Il reste : " + oxygen + " d'oxygene");
					System.out.println("--------------------------------------------------------------------------");
				}
				if (oxygen < 1) {
					i = playingorderlist.size();
					endPhase(playingorderlist);
				}
			}
		}
	}

	public static void endPhase(List<Integer> playingorderlist) throws InterruptedException {
		oxygenEmpty();
		levelRemoval(cavelist);
		launchGame();
	}

	public static void playTurn(Player joueur, Cave cave, Level niveau, String action) {
		if (action.equals("m")) {
			if (niveau.Depth > 0) {
				joueur.currentlevel--;
				System.out.println(joueur.name + " est monté de 1 niveau");
				oxygen -= breathing(joueur);
				confirmedaction = true;
			}
			else {
				if (joueur.currentcave > 0) {
					joueur.currentlevel = cavelist.get(joueur.currentcave - 1).Max();
					joueur.currentcave--;
					System.out.println(joueur.name + " passe à la cave " + joueur.currentcave);
					if (joueur.currentcave == 0) {
						System.out.println(joueur.name + " se retrouve à la surface");
						retourSurface(joueur);
					}
					oxygen -= breathing(joueur);
					confirmedaction = true;
				}
				else {
					System.out.println(joueur.name + " est deja à la surface");
				}
			}
		}
		else if (action.equals("d")) {
			if (niveau.Depth < cave.Max()) {
				joueur.currentlevel++;
				System.out.println(joueur.name + " est descendu de 1 niveau");
				if (joueur.currentcave == cavelist.size() - 1) {
					System.out.println(joueur.name + " se retrouve au fond");
				}
				oxygen -= breathing(joueur);
				confirmedaction = true;
			}
			else {
				if (joueur.currentcave < cavelist.size() - 1) {
					joueur.currentlevel = 0;
					joueur.currentcave++;
					System.out.println(joueur.name + " passe à la cave " + joueur.currentcave);
					oxygen -= breathing(joueur);
					confirmedaction = true;
				}
				else {
					System.out.println(joueur.name + " est deja au fond");
				}
			}
		}
		else if (action.equals("w")) {
			oxygen = 0;
			confirmedaction = true;
		}
		else if (action.equals("a")) {
			if (niveau.Coffre_present()) {
				System.out.println(joueur.name + " ... dommage il n'y a pas de coffre ici");
			}
			else {
				int randomchest = random.nextInt(niveau.chestlist.size());
				System.out.println(joueur.name + " recupere un coffre de type " + niveau.chestlist.get(randomchest).chestype);
				Chest coffre = new Chest(niveau.chestlist.get(randomchest).chestype);
				joueur.playerchestlist.add(coffre);
				niveau.chestlist.remove(randomchest);
				oxygen--;
				confirmedaction = true;
			}
		}
		else {
			System.out.println("Commande inexistante, veuillez réessayer");
		}
	}

	public static void testons(Player joueur, Level niveau) {
		Level lastlevel = cavelist.get(cavelist.size() - 1).levels.get(cavelist.get(cavelist.size() - 1).levels.size() - 1);
		System.out.println("");
		System.out.println(lastlevel.chestlist.size() + " derniere cave dernier niveau");
		System.out.println(niveau.chestlist.size() + " niveau en cours");
		System.out.println("Je parle de " + joueur.name);
		System.out.println(joueur.playerchestlist.size() + " coffres en main");
		System.out.println(joueur.playerupchestlist.size() + " a la surface");
		System.out.println("");
	}

	public static List<Integer> playingOrder(List<Player> playerlist) {
		List<Integer[]> disorder = new ArrayList<>();
		List<Integer[]> temporaryorder = new ArrayList<>();
		List<List<Integer[]>> separatedorder = new ArrayList<>();
		List<Integer> order = new ArrayList<>();
		Integer[] max = new Integer[2];
		boolean found = false;
		for (int i = 0; i < playerlist.size(); ++i) {
			Integer[] association = new Integer[2];
			Player joueur = playerlist.get(i);
			association[0] = i;
			association[1] = (joueur.currentcave * 13 + joueur.currentlevel);
			disorder.add(association);
		}
		System.out.println("disorder");
		for ( Integer[] k : disorder) {
			System.out.println(k[1]);
		}
		while (!disorder.isEmpty()) {
			max = disorder.get(0);
			found = false;
			for (Integer i = 0; i < disorder.size(); ++i) {
				if (disorder.get(i)[1] > max[1]) {
					max = disorder.get(i);
					found = true;
				}
			}
			if (!found) {
				for (Integer i = 0; i < disorder.size(); ++i) {
					if (disorder.get(i)[1] == max[1]) {
						max = disorder.get(i);
					}
				}
			}
			temporaryorder.add(max);
			disorder.remove(max);
		}
		System.out.println("temporaryorder");
		for ( Integer[] k : temporaryorder) {
			System.out.println(k[1]);
		}
		max = temporaryorder.get(0);
		List<Integer[]> insidelist = new ArrayList<>();
		for (Integer[] index : temporaryorder) {
			if (index[1] == max[1]) {
				insidelist.add(index);
			}
			else {
				max = index;
				List<Integer[]> insidelist2 = new ArrayList<>();
				insidelist2.addAll(insidelist);
				insidelist.clear();
				insidelist.add(index);
				separatedorder.add(insidelist2);
			}
		}
		List<Integer[]> insidelist2 = new ArrayList<>();
		insidelist2.addAll(insidelist);
		insidelist.clear();
		separatedorder.add(insidelist2);
		temporaryorder.removeAll(insidelist2);
		System.out.println("separatedorder");
		for ( List<Integer[]> k : separatedorder) {
			for ( Integer[] j : k) {
			System.out.println(j[1]);
			}
		}
		for (List<Integer[]> i : separatedorder) {
			while (!i.isEmpty()) {
				int randomplayer = random.nextInt(i.size());
				order.add(i.get(randomplayer)[0]);
				i.remove(randomplayer);
			}
		}
		System.out.println("order");
		for ( Integer k : order) {
			System.out.println(k);
		}
		return (order);
	}

	public static void retourSurface(Player joueur) {
		for (Chest chests : joueur.playerchestlist) {
			joueur.playerupchestlist.add(chests);
		}
		joueur.playerchestlist.clear();
	}

	public static void oxygenEmpty() {
		System.out.println("L'oxygene est terminé");
		System.out.println("La phase " + currentphase + " est terminée, tous les joueurs sont envoyés a la surface, \r\nles coffres deja deposés sont ouverts.");
		currentphase++;
		Level lastlevel = cavelist.get(cavelist.size() - 1).levels.get(cavelist.get(cavelist.size() - 1).levels.size() - 1);
		for (Player players : playerlist) {
			for (Chest chests : players.playerchestlist) {
				lastlevel.chestlist.add(chests);
			}
			players.playerchestlist.clear();
			int gain = 0;
			for (Chest chests : players.playerupchestlist) {
				gain += chests.openChest();
			}
			players.playerupchestlist.clear();
			players.score += gain;
			System.out.println(players.name + " a gagné " + gain + " trésors");
			players.currentcave = 0;
			players.currentlevel = 0;
		}
	}

	public static int breathing(Player joueur) {
		return (joueur.playerchestlist.size() + 1);
	}

	public static void levelRemoval(List<Cave> cavelist) {
		List<Level> toremove = new ArrayList<>();
		for (int i = 1; i < cavelist.size(); ++i) {
			Cave cave = cavelist.get(i);
			for (Level level : cave.levels) {
				if (level.chestlist.isEmpty()) {
					toremove.add(level);
				}
			}
			cave.levels.removeAll(toremove);
			toremove.clear();
		}
	}

	public static void launchGame() throws InterruptedException {
		if (currentphase <= phasenumber) {
			oxygen = oxygenmax;
			System.out.println(oxygen);
			StdDraw.setXscale(0, Affichage.computingX(playerlist));
			StdDraw.setYscale(0, Affichage.computingY(cavelist));
			gameplay();
		}
		else {
			int winningindex = 0;
			int max = playerlist.get(0).score;
			for (int i = 0; i < playerlist.size(); ++i) {
				if (playerlist.get(i).score > max) {
					max = playerlist.get(i).score;
					winningindex = i;
				}
			}
			Affichage.endGameDisplay(cavelist, playerlist, winningindex);
			System.out.println(playerlist.get(winningindex).name + " est le grand gagnant !!! FELICITATIONS");

		}
	}

}
